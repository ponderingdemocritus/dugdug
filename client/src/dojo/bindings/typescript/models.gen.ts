// Generated by dojo-bindgen on Wed, 28 Aug 2024 21:10:21 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript`
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<
  ReturnType<typeof defineContractComponents>
>;

// Type definition for `dojo::model::layout::Layout` enum
export type Layout =
  | { type: "Fixed"; value: RecsType.NumberArray }
  | { type: "Struct"; value: RecsType.StringArray }
  | { type: "Tuple"; value: RecsType.StringArray }
  | { type: "Array"; value: RecsType.StringArray }
  | { type: "ByteArray" }
  | { type: "Enum"; value: RecsType.StringArray };

export const LayoutDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
  data: String[];
  pending_word: BigInt;
  pending_word_len: Number;
}
export const ByteArrayDefinition = {
  data: RecsType.StringArray,
  pending_word: RecsType.BigInt,
  pending_word_len: RecsType.Number,
};

// Type definition for `core::integer::u256` struct
export interface U256 {
  low: BigInt;
  high: BigInt;
}
export const U256Definition = {
  low: RecsType.BigInt,
  high: RecsType.BigInt,
};

// Type definition for `origami_token::components::token::erc20::erc20_allowance::ERC20AllowanceModel` struct
export interface ERC20AllowanceModel {
  token: BigInt;
  owner: BigInt;
  spender: BigInt;
  amount: U256;
}
export const ERC20AllowanceModelDefinition = {
  token: RecsType.BigInt,
  owner: RecsType.BigInt,
  spender: RecsType.BigInt,
  amount: U256Definition,
};

// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
  selector: BigInt;
  layout: Layout;
}
export const FieldLayoutDefinition = {
  selector: RecsType.BigInt,
  layout: LayoutDefinition,
};

// Type definition for `origami_token::components::token::erc20::erc20_balance::ERC20BalanceModel` struct
export interface ERC20BalanceModel {
  token: BigInt;
  account: BigInt;
  amount: U256;
}
export const ERC20BalanceModelDefinition = {
  token: RecsType.BigInt,
  account: RecsType.BigInt,
  amount: U256Definition,
};

// Type definition for `dugdug::models::MinerChoice` enum
export type MinerChoice =
  | { type: "None" }
  | { type: "Selfless" }
  | { type: "Selfish" };

export const MinerChoiceDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `dugdug::models::MinerStatus` enum
export type MinerStatus = { type: "Idle" } | { type: "Mining" };

export const MinerStatusDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `dugdug::models::MinerHealth` enum
export type MinerHealth = { type: "Dead" } | { type: "Alive" };

export const MinerHealthDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `dugdug::models::GearLevel` enum
export type GearLevel =
  | { type: "Wooden" }
  | { type: "Stone" }
  | { type: "ColdIron" }
  | { type: "Diamond" }
  | { type: "Adamantium" };

export const GearLevelDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `dugdug::models::Miner` struct
export interface Miner {
  id: Number;
  owner: BigInt;
  xp: Number;
  health: MinerHealth;
  gear_level: GearLevel;
  status: MinerStatus;
  choice: MinerChoice;
  last_checkup: Number;
  entered_mine: Number;
  mine_id: Number;
  seed: BigInt;
  birthtime: Number;
}
export const MinerDefinition = {
  id: RecsType.Number,
  owner: RecsType.BigInt,
  xp: RecsType.Number,
  health: MinerHealthDefinition,
  gear_level: GearLevelDefinition,
  status: MinerStatusDefinition,
  choice: MinerChoiceDefinition,
  last_checkup: RecsType.Number,
  entered_mine: RecsType.Number,
  mine_id: RecsType.Number,
  seed: RecsType.BigInt,
  birthtime: RecsType.Number,
};

// Type definition for `dugdug::events::MinerSpawned` struct
export interface MinerSpawned {
  id: Number;
  time: Number;
  miner: Miner;
}
export const MinerSpawnedDefinition = {
  id: RecsType.Number,
  time: RecsType.Number,
  miner: MinerDefinition,
};

// Type definition for `dugdug::models::MineStatus` enum
export type MineStatus =
  | { type: "Open" }
  | { type: "Mined" }
  | { type: "Collapsed" };

export const MineStatusDefinition = {
  type: RecsType.String,
  value: RecsType.String,
};

// Type definition for `dugdug::models::Mine` struct
export interface Mine {
  id: Number;
  current_status: MineStatus;
  mining_state: Number;
  selfless_miners: Number;
  selfish_miners: Number;
  stability: Number;
  efficiency: Number;
  seed: BigInt;
  mineral_payout: Number;
}
export const MineDefinition = {
  id: RecsType.Number,
  current_status: MineStatusDefinition,
  mining_state: RecsType.Number,
  selfless_miners: RecsType.Number,
  selfish_miners: RecsType.Number,
  stability: RecsType.Number,
  efficiency: RecsType.Number,
  seed: RecsType.BigInt,
  mineral_payout: RecsType.Number,
};

// Type definition for `dugdug::events::MineUpdate` struct
export interface MineUpdate {
  id: Number;
  time: Number;
  mine: Mine;
}
export const MineUpdateDefinition = {
  id: RecsType.Number,
  time: RecsType.Number,
  mine: MineDefinition,
};

// Type definition for `origami_token::components::security::initializable::InitializableModel` struct
export interface InitializableModel {
  token: BigInt;
  initialized: Boolean;
}
export const InitializableModelDefinition = {
  token: RecsType.BigInt,
  initialized: RecsType.Boolean,
};

// Type definition for `dugdug::events::MineralFound` struct
export interface MineralFound {
  id: Number;
  time: Number;
  mineral: Number;
}
export const MineralFoundDefinition = {
  id: RecsType.Number,
  time: RecsType.Number,
  mineral: RecsType.Number,
};

// Type definition for `origami_token::components::token::erc20::erc20_metadata::ERC20MetadataModel` struct
export interface ERC20MetadataModel {
  token: BigInt;
  name: String;
  symbol: String;
  decimals: Number;
  total_supply: U256;
}
export const ERC20MetadataModelDefinition = {
  token: RecsType.BigInt,
  name: RecsType.String,
  symbol: RecsType.String,
  decimals: RecsType.Number,
  total_supply: U256Definition,
};

// Type definition for `dugdug::tokens::AXE::ERC20BridgeableModel` struct
export interface ERC20BridgeableModel {
  token: BigInt;
  l2_bridge_address: BigInt;
}
export const ERC20BridgeableModelDefinition = {
  token: RecsType.BigInt,
  l2_bridge_address: RecsType.BigInt,
};

export function defineContractComponents(world: World) {
  return {
    // Model definition for `origami_token::components::token::erc20::erc20_allowance::ERC20AllowanceModel` model
    ERC20AllowanceModel: (() => {
      return defineComponent(
        world,
        {
          token: RecsType.BigInt,
          owner: RecsType.BigInt,
          spender: RecsType.BigInt,
          amount: U256Definition,
        },
        {
          metadata: {
            namespace: "dugdug",
            name: "ERC20AllowanceModel",
            types: ["ContractAddress", "ContractAddress", "ContractAddress"],
            customTypes: ["U256"],
          },
        }
      );
    })(),

    // Model definition for `origami_token::components::token::erc20::erc20_balance::ERC20BalanceModel` model
    ERC20BalanceModel: (() => {
      return defineComponent(
        world,
        {
          token: RecsType.BigInt,
          account: RecsType.BigInt,
          amount: U256Definition,
        },
        {
          metadata: {
            namespace: "dugdug",
            name: "ERC20BalanceModel",
            types: ["ContractAddress", "ContractAddress"],
            customTypes: ["U256"],
          },
        }
      );
    })(),

    // Model definition for `dugdug::models::Miner` model
    Miner: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          owner: RecsType.BigInt,
          xp: RecsType.Number,
          health: RecsType.String,
          gear_level: RecsType.String,
          status: RecsType.String,
          choice: RecsType.String,
          last_checkup: RecsType.Number,
          entered_mine: RecsType.Number,
          mine_id: RecsType.Number,
          seed: RecsType.BigInt,
          birthtime: RecsType.Number,
        },
        {
          metadata: {
            namespace: "dugdug",
            name: "Miner",
            types: [
              "u32",
              "ContractAddress",
              "u32",
              "MinerHealth",
              "GearLevel",
              "MinerStatus",
              "MinerChoice",
              "u64",
              "u64",
              "u32",
              "u128",
              "u64",
            ],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `dugdug::events::MinerSpawned` model
    MinerSpawned: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          time: RecsType.Number,
          miner: MinerDefinition,
        },
        {
          metadata: {
            namespace: "dugdug",
            name: "MinerSpawned",
            types: ["u32", "u64"],
            customTypes: ["Miner"],
          },
        }
      );
    })(),

    // Model definition for `dugdug::models::Mine` model
    Mine: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          current_status: RecsType.String,
          mining_state: RecsType.Number,
          selfless_miners: RecsType.Number,
          selfish_miners: RecsType.Number,
          stability: RecsType.Number,
          efficiency: RecsType.Number,
          seed: RecsType.BigInt,
          mineral_payout: RecsType.Number,
          last_miner: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "dugdug",
            name: "Mine",
            types: [
              "u32",
              "MineStatus",
              "u32",
              "u32",
              "u32",
              "u32",
              "u32",
              "u128",
              "u64",
            ],
            customTypes: [],
          },
        }
      );
    })(),

    PromptMessage: (() => {
      return defineComponent(
        world,
        {
          identity: RecsType.BigInt,
          event_id: RecsType.Number,
          event_tag: RecsType.String,
          prompt: RecsType.String,
          timestamp: RecsType.Number,
        },
        {
          metadata: {
            namespace: "haiku",
            name: "PromptMessage",
            types: ["ContractAddress", "u32", "u64"],
            customTypes: ["ByteArray", "ByteArray"],
          },
        }
      );
    })(),

    // Model definition for `dugdug::events::MineUpdate` model
    MineUpdate: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          time: RecsType.Number,
          mine: MineDefinition,
        },
        {
          metadata: {
            namespace: "dugdug",
            name: "MineUpdate",
            types: ["u32", "u64"],
            customTypes: ["Mine"],
          },
        }
      );
    })(),

    // Model definition for `origami_token::components::security::initializable::InitializableModel` model
    InitializableModel: (() => {
      return defineComponent(
        world,
        {
          token: RecsType.BigInt,
          initialized: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "dugdug",
            name: "InitializableModel",
            types: ["ContractAddress", "bool"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `dugdug::events::MineralFound` model
    MineralFound: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          time: RecsType.Number,
          mineral: RecsType.Number,
        },
        {
          metadata: {
            namespace: "dugdug",
            name: "MineralFound",
            types: ["u32", "u64", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    MineralFoundHaiku: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          timestamp: RecsType.Number,
          seed: RecsType.BigInt,
          minerals: RecsType.Number,
        },
        {
          metadata: {
            namespace: "haiku",
            name: "MineralFoundHaiku",
            types: ["u32", "u64", "u32"],
            customTypes: [],
          },
        }
      );
    })(),

    // Model definition for `origami_token::components::token::erc20::erc20_metadata::ERC20MetadataModel` model
    ERC20MetadataModel: (() => {
      return defineComponent(
        world,
        {
          token: RecsType.BigInt,
          name: RecsType.String,
          symbol: RecsType.String,
          decimals: RecsType.Number,
          total_supply: U256Definition,
        },
        {
          metadata: {
            namespace: "dugdug",
            name: "ERC20MetadataModel",
            types: ["ContractAddress", "u8"],
            customTypes: ["ByteArray", "ByteArray", "U256"],
          },
        }
      );
    })(),

    // Model definition for `dugdug::tokens::AXE::ERC20BridgeableModel` model
    ERC20BridgeableModel: (() => {
      return defineComponent(
        world,
        {
          token: RecsType.BigInt,
          l2_bridge_address: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "dugdug",
            name: "ERC20BridgeableModel",
            types: ["ContractAddress", "ContractAddress"],
            customTypes: [],
          },
        }
      );
    })(),
  };
}
